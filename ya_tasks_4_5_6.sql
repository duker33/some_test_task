-- Задание 4. Выбираем пользователей (записи users), у которых заведено более одной карточки.
SELECT users.* FROM users WHERE id LEFT ANTI JOIN cards ON user_id == cards.card_id;

-- Задание 5. Выбираем пользователей (записи users), у которых заведено более одной карточки.
SELECT users.* FROM users WHERE id
LEFT INNER JOIN cards ON user_id == cards.card_id
GROUP BY users.user_id
HAVING COUNT(users.user_id) > 1
;

/*
Задание 6

> SQL-запрос на тестовых данных выполняется за 1мкс. Достаточно ли он оптимизирован?
1мкс - слишком мало чтобы судить об оптимизации, т.е. запрос получил слишком мало тестовых данных.
На обычном пользовательском ssd скорость чтения примерно 550 MB/s. За 1мкс мы успели бы получить 550 байт - это примерно в 16 раз меньше дефолтного размера страницы хранения (page) в Postgres, например. И это без учёта компиляции запроса и latency диска. Скорее всего запрос забрал все данные из памяти и не ходил на винт.

> Назовите Ваши критерий оптимизации работы SQL-запроса.
самое узкое время в производительности БД - дисковое время. По мне лучший способ анализировать запросы (по соотношению цена/качество) - понять сколько диска будет читать/писать запрос. Например если для поиска мы увидели линейное чтение, значит нам не хватает индексов, вероятно.

Анализировать оптимизацию запросов от времени можно только на специально собранном стейдже: данные для тестов должны быть репрезентативны, статистически мощны, повторять (или напоминать) профили нагрузок на проде.

*/
